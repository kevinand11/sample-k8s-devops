// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s'
import { Construct } from 'constructs'


/**
 * TwingateResource represents a resource in Twingate.
 *
 * @schema TwingateResource
 */
export class TwingateResource extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TwingateResource"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'twingate.com/v1beta',
    kind: 'TwingateResource',
  }

  /**
   * Renders a Kubernetes manifest for "TwingateResource".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TwingateResourceProps = {}): any {
    return {
      ...TwingateResource.GVK,
      ...toJson_TwingateResourceProps(props),
    }
  }

  /**
   * Defines a "TwingateResource" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TwingateResourceProps = {}) {
    super(scope, id, {
      ...TwingateResource.GVK,
      ...props,
    })
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson()

    return {
      ...TwingateResource.GVK,
      ...toJson_TwingateResourceProps(resolved),
    }
  }
}

/**
 * TwingateResource represents a resource in Twingate.
 *
 * @schema TwingateResource
 */
export interface TwingateResourceProps {
  /**
   * @schema TwingateResource#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * TwingateResourceSpec defines the desired state of TwingateResource
   *
   * @schema TwingateResource#spec
   */
  readonly spec?: TwingateResourceSpec;

}

/**
 * Converts an object of type 'TwingateResourceProps' to JSON representation.
 */
 
export function toJson_TwingateResourceProps(obj: TwingateResourceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TwingateResourceSpec(obj.spec),
  }
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})
}
 

/**
 * TwingateResourceSpec defines the desired state of TwingateResource
 *
 * @schema TwingateResourceSpec
 */
export interface TwingateResourceSpec {
  /**
   * @schema TwingateResourceSpec#id
   */
  readonly id?: string;

  /**
   * Name of the resource.
   *
   * @schema TwingateResourceSpec#name
   */
  readonly name: string;

  /**
   * Address of the resource.
   *
   * @schema TwingateResourceSpec#address
   */
  readonly address: string;

  /**
   * Alias of the resource.
   *
   * @schema TwingateResourceSpec#alias
   */
  readonly alias?: string;

  /**
   * isBrowserShortcutEnabled specifies whether the resource will display a browser shortcut in the Twingate client.
   *
   * @schema TwingateResourceSpec#isBrowserShortcutEnabled
   */
  readonly isBrowserShortcutEnabled?: boolean;

  /**
   * @schema TwingateResourceSpec#securityPolicyId
   */
  readonly securityPolicyId?: string;

  /**
   * isVisible specifies whether the resource will display in the main resources list in the Twingate client.
   *
   * @schema TwingateResourceSpec#isVisible
   */
  readonly isVisible?: boolean;

  /**
   * protocols specifies the resource's protocol policies.
   *
   * @schema TwingateResourceSpec#protocols
   */
  readonly protocols?: TwingateResourceSpecProtocols;

  /**
   * syncLabels specifies whether the resource should sync the metadata labels as resource tags in the Twingate client.
   *
   * @schema TwingateResourceSpec#syncLabels
   */
  readonly syncLabels?: boolean;

}

/**
 * Converts an object of type 'TwingateResourceSpec' to JSON representation.
 */
 
export function toJson_TwingateResourceSpec(obj: TwingateResourceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined }
  const result = {
    'id': obj.id,
    'name': obj.name,
    'address': obj.address,
    'alias': obj.alias,
    'isBrowserShortcutEnabled': obj.isBrowserShortcutEnabled,
    'securityPolicyId': obj.securityPolicyId,
    'isVisible': obj.isVisible,
    'protocols': toJson_TwingateResourceSpecProtocols(obj.protocols),
    'syncLabels': obj.syncLabels,
  }
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})
}
 

/**
 * protocols specifies the resource's protocol policies.
 *
 * @schema TwingateResourceSpecProtocols
 */
export interface TwingateResourceSpecProtocols {
  /**
   * allowIcmp specifies whether the resource will allow ICMP traffic.
   *
   * @schema TwingateResourceSpecProtocols#allowIcmp
   */
  readonly allowIcmp?: boolean;

  /**
   * tcp specifies the resource's TCP protocol policy.
   *
   * @schema TwingateResourceSpecProtocols#tcp
   */
  readonly tcp?: TwingateResourceSpecProtocolsTcp;

  /**
   * udp specifies the resource's UDP protocol policy.
   *
   * @schema TwingateResourceSpecProtocols#udp
   */
  readonly udp?: TwingateResourceSpecProtocolsUdp;

}

/**
 * Converts an object of type 'TwingateResourceSpecProtocols' to JSON representation.
 */
 
export function toJson_TwingateResourceSpecProtocols(obj: TwingateResourceSpecProtocols | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined }
  const result = {
    'allowIcmp': obj.allowIcmp,
    'tcp': toJson_TwingateResourceSpecProtocolsTcp(obj.tcp),
    'udp': toJson_TwingateResourceSpecProtocolsUdp(obj.udp),
  }
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})
}
 

/**
 * tcp specifies the resource's TCP protocol policy.
 *
 * @schema TwingateResourceSpecProtocolsTcp
 */
export interface TwingateResourceSpecProtocolsTcp {
  /**
   * @schema TwingateResourceSpecProtocolsTcp#policy
   */
  readonly policy?: TwingateResourceSpecProtocolsTcpPolicy;

  /**
   * @schema TwingateResourceSpecProtocolsTcp#ports
   */
  readonly ports?: TwingateResourceSpecProtocolsTcpPorts[];

}

/**
 * Converts an object of type 'TwingateResourceSpecProtocolsTcp' to JSON representation.
 */
 
export function toJson_TwingateResourceSpecProtocolsTcp(obj: TwingateResourceSpecProtocolsTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined }
  const result = {
    'policy': obj.policy,
    'ports': obj.ports?.map((y) => toJson_TwingateResourceSpecProtocolsTcpPorts(y)),
  }
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})
}
 

/**
 * udp specifies the resource's UDP protocol policy.
 *
 * @schema TwingateResourceSpecProtocolsUdp
 */
export interface TwingateResourceSpecProtocolsUdp {
  /**
   * @schema TwingateResourceSpecProtocolsUdp#policy
   */
  readonly policy?: TwingateResourceSpecProtocolsUdpPolicy;

  /**
   * @schema TwingateResourceSpecProtocolsUdp#ports
   */
  readonly ports?: TwingateResourceSpecProtocolsUdpPorts[];

}

/**
 * Converts an object of type 'TwingateResourceSpecProtocolsUdp' to JSON representation.
 */
 
export function toJson_TwingateResourceSpecProtocolsUdp(obj: TwingateResourceSpecProtocolsUdp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined }
  const result = {
    'policy': obj.policy,
    'ports': obj.ports?.map((y) => toJson_TwingateResourceSpecProtocolsUdpPorts(y)),
  }
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})
}
 

/**
 * @schema TwingateResourceSpecProtocolsTcpPolicy
 */
export enum TwingateResourceSpecProtocolsTcpPolicy {
  /** ALLOW_ALL */
  ALLOW_UNDERSCORE_ALL = "ALLOW_ALL",
  /** RESTRICTED */
  RESTRICTED = "RESTRICTED",
}

/**
 * @schema TwingateResourceSpecProtocolsTcpPorts
 */
export interface TwingateResourceSpecProtocolsTcpPorts {
  /**
   * @schema TwingateResourceSpecProtocolsTcpPorts#start
   */
  readonly start?: number;

  /**
   * @schema TwingateResourceSpecProtocolsTcpPorts#end
   */
  readonly end?: number;

}

/**
 * Converts an object of type 'TwingateResourceSpecProtocolsTcpPorts' to JSON representation.
 */
 
export function toJson_TwingateResourceSpecProtocolsTcpPorts(obj: TwingateResourceSpecProtocolsTcpPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined }
  const result = {
    'start': obj.start,
    'end': obj.end,
  }
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})
}
 

/**
 * @schema TwingateResourceSpecProtocolsUdpPolicy
 */
export enum TwingateResourceSpecProtocolsUdpPolicy {
  /** ALLOW_ALL */
  ALLOW_UNDERSCORE_ALL = "ALLOW_ALL",
  /** RESTRICTED */
  RESTRICTED = "RESTRICTED",
}

/**
 * @schema TwingateResourceSpecProtocolsUdpPorts
 */
export interface TwingateResourceSpecProtocolsUdpPorts {
  /**
   * @schema TwingateResourceSpecProtocolsUdpPorts#start
   */
  readonly start?: number;

  /**
   * @schema TwingateResourceSpecProtocolsUdpPorts#end
   */
  readonly end?: number;

}

/**
 * Converts an object of type 'TwingateResourceSpecProtocolsUdpPorts' to JSON representation.
 */
 
export function toJson_TwingateResourceSpecProtocolsUdpPorts(obj: TwingateResourceSpecProtocolsUdpPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined }
  const result = {
    'start': obj.start,
    'end': obj.end,
  }
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})
}
 

